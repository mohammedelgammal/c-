#ifndef WEIGHTEDGRAPH
#define WEIGHTEDGRAPH

#include <iostream>
#include <string>
#include <set>
#include <stack>

using namespace std;

struct Node
{
	Node(const string label) : label{label} {};
	string label;
};

struct Edge
{
	Edge(){};
	Edge(const int weight, string from, string to)
		: weight{weight}, from{from}, to{to} {};
	string toString()
	{
		string edgeStr;
		edgeStr += from += string("->") += to;

		return edgeStr;
	}
	int weight;
	string from;
	string to;
};

struct NodeEntry
{
	NodeEntry(const string label, const int priority) : label{label}, priority{priority} {};
	string label;
	int priority;
	bool operator<(const NodeEntry &other) const
	{
		return priority > other.priority;
	}
};

class WeightedGraph
{
public:
	// Constructors
	WeightedGraph();
	~WeightedGraph();

	// Methods
	void addNode(const string label);
	void addEdge(const int weight, const string from, const string to);
	void traverse() const;
	stack<string> shortestPath(const string from, const string to) const;
	bool hasCycle() const;
	WeightedGraph *spanningTree() const;

private:
	unordered_map<string, set<Edge *>> *graph;
	bool hasNode(const string label) const;
	void cycleTraverse(const string root, const string parent, bool &hasCycle, set<string> &visited) const;
	void getLowestNode(string current, WeightedGraph &spanningGraph, set<string> &visited) const;
};

#endif // WEIGHTEDGRAPH