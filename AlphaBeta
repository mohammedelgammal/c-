#if !defined(ALPHABETA)
#define ALPHABETA

#include <iostream>

using namespace std;

class Alpha;

template <typename T>

class Beta
{
public:
    Beta()
    {
        ++Beta::total;
    }
    ~Beta()
    {
        --Beta::total;
    }
    friend class Alpha;
    static void getInstances()
    {
        cout << total << endl;
    };
    T display(T num)
    {
        return num * 2;
    }

private:
    int bvalue;
    static int total;
};
class Alpha
{
public:
    Alpha() : avalue{10} {};
    int getBetaVal(Beta b)
    {
        return b.bvalue;
    };

private:
    int avalue;
};

// dynamic_cast<Derived*>(basePtr) // dynamic_cast makes sure base ptr is the same of the defined derived class ptr
// Derived* derived = dynamic_cast<Derived*>(basePtr) downcasting
// Base* base = dynamic_cast<Base*>(derivedPtr)upcasting

#endif // ALPHABETA