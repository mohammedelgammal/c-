#ifndef GRAPH
#define GRAPH

#include <iostream>
#include <list>
#include <set>
using namespace std;

struct Node
{
    Node(const string label) : label{label} {};
    const string label;
};

class Graph
{
public:
    // Constructors
    Graph();
    ~Graph();

    // Methods
    void addNode(const string label);
    void removeNode(const string label);
    void addEdge(const string source, const string target);
    void removeEdge(const string source, const string target);
    void traverse() const;
    void depthTraverse(const string start) const;
    void depthTraverseIter(const string start) const;
    void breadthTraverseQueue(const string label) const;

private:
    unordered_map<string, list<Node *>> *adjanecyList;
    bool hasNode(const string label) const;
    bool hasTarget(const string source, const string target) const;
    bool isValidEdge(const string source, const string target) const;
    void depthTraverse(string label, list<Node *> list, set<string> &set) const;
};

#endif // GRAPH