#ifndef LINKEDLIST
#define LINKEDLIST

#include <vector>
using std::vector;

template <typename T>
class LinkedList;

template <typename T>
class Node
{
public:
    Node(const T value, Node<T> *next);

private:
    Node<T> *next = nullptr;
    T value;
    friend class LinkedList<T>;
};

template <typename T>
class LinkedList
{
public:
    // Constructors
    LinkedList(T value);
    LinkedList();
    ~LinkedList();

    // Methods
    void addFirst(const T value); // O(1) Constant
    vector<T> toArray() const;    // O(n) Linear
    void addLast(const T value);  // O(n) Linear
    void deleteFirst();           // O(1) Constant
    void deleteLast();            // O(n) Linear
    bool isListEmpty() const;     // O(1) Constant
    bool contains(T value) const; // O(n) Linear
    int indexOf(T value) const;   // O(n) Linear
    void reverse();               // O(n) Linear
    int getKthFromEnd(int kth);   // O(n) Linear

private:
    Node<T> *head = nullptr;
};

#endif // LINKEDLIST