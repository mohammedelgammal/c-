#ifndef BINARYSEARCHTREE
#define BINARYSEARCHTREE

struct Node
{
    Node(const int value) : value{value}, rightChildNode{nullptr}, leftChildNode{nullptr}, parentNode{nullptr} {};
    int value;
    Node *rightChildNode;
    Node *leftChildNode;
    Node *parentNode;
};

class BinarySearchTree
{
public:
    // Constructors
    BinarySearchTree(const int value);
    ~BinarySearchTree();
    // Methods
    void insert(const int value);
    bool find(const int value) const;
    void traversePreOrder() const;
    void traverseInOrder() const;
    void traverseInReverseOrder() const;
    void traversePostOrder() const;
    int getHeight() const;
    int getMinimum() const;
    int getMinimumUnordered() const;
    bool isIdentical(const BinarySearchTree *tree) const;
    bool isBinarySearchTree() const;
    void swapRoot();

private:
    Node *root;
    void traversePreOrder(const Node *root) const;
    void traverseInOrder(Node *root) const;
    void traverseInReverseOrder(Node *root) const;
    void traversePostOrder(Node *root) const;
    int getHeight(const Node *root) const;
    int getMinimum(const Node *root) const;
    int getMinimumUnordered(const Node *root) const;
    bool isIdentical(const Node *originalRoot, const Node *otherRoot) const;
    bool validateNode(const Node *root, int min, int max) const;
};

#endif // BINARYSEARCHTREE