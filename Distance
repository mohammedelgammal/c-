#ifndef DISTANCE
#define DISTANCE

#include <iostream>

using namespace std;

class Distance
{
public:
    Distance();
    Distance(const int kiloMeters, const int meters);
    int getMeters() const;
    int getKiloMeters() const;
    int getCount() const;

    Distance operator++();
    // void increaseCount();

    virtual void display();

    // converting from the basic type float to Distance using conversion constructor
    explicit Distance(float distance);
    operator float();

protected:
    static int count;

private:
    int kilometers;
    int meters;
    mutable int convertCount = 0;
};

class DistanceChild : public Distance
{
public:
    // using Distance::Distance; // inheriting all the constructors one-time
    DistanceChild() : Distance(){};
    DistanceChild(float distance) : Distance(distance){};
    DistanceChild(const int meters, const int kiloMeters);

    void display() override
    {
        cout << "distance" << endl;
    }

    // DistanceChild operator++();
};

#endif // DISTANCE