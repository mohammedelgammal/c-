#ifndef SOLUTION
#define SOLUTION

#include <functional>

using std::function;
using std::max;
using std::string;
using std::unordered_map;
using std::vector;

int uniquePathsWithObstacles(vector<vector<int>> &obstacleGrid) {
  int m = obstacleGrid.size(), n = obstacleGrid[0].size();
  vector<size_t> dp(n, 0);
  dp[n - 1] = 1;
  for (int i = m - 1; i >= 0; i--) {
    for (int j = n - 1; j >= 0; j--) {
      if (obstacleGrid[i][j])
        dp[j] = 0;
      else if (j + 1 < n)
        dp[j] += dp[j + 1];
    }
  }
  return dp[0];
}

#endif // SOLUTION