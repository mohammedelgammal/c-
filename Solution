#ifndef SOLUTION
#define SOLUTION

#include <algorithm>
#include <functional>

using std::function;
using std::max;
using std::min;
using std::sort;
using std::string;
using std::swap;
using std::unordered_map;
using std::vector;

vector<vector<int>> merge(vector<vector<int>> &intervals) {
  int size = intervals.size();
  sort(intervals.begin(), intervals.end(),
       [](vector<int> &x, vector<int> &y) { return x[0] < y[0]; });
  vector<int> last = intervals[0];
  vector<vector<int>> ans;
  for (int i = 1; i < size; i++) {
    vector<int> curr = intervals[i];
    if (curr[0] > last[1]) {
      ans.push_back(last);
      last = curr;
    } else {
      int start = min(curr[0], last[0]), end = max(curr[1], last[1]);
      last = {start, end};
    }
  }
  ans.push_back(last);
  return ans;
}

#endif // SOLUTION