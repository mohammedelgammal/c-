#ifndef SOLUTION
#define SOLUTION

#include <functional>

using std::function;
using std::max;
using std::min;
using std::string;
using std::swap;
using std::unordered_map;
using std::vector;

vector<vector<int>> insert(vector<vector<int>> &intervals,
                           vector<int> &newInterval) {
  int size = intervals.size();
  vector<vector<int>> ans;
  for (int i = 0; i < size; i++) {
    vector<int> currInterval = intervals[i];
    if (newInterval[1] < currInterval[0]) {
      ans.push_back(newInterval);
      for (int j = i; j < size; j++)
        ans.push_back(intervals[j]);
      return ans;
    } else if (newInterval[0] > currInterval[1]) {
      ans.push_back(currInterval);
    } else {
      int start = min(newInterval[0], currInterval[0]),
          end = max(newInterval[1], currInterval[1]);
      newInterval = {start, end};
    }
  }
  ans.push_back(newInterval);
  return ans;
}

#endif // SOLUTION